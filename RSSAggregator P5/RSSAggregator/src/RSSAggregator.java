import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output files.
 *
 * @author Quantez Merchant
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in one of the the generated HTML file. These
     * are the expected elements generated by this method:
     *
     * <html> <head> <title>the channelTree tag title as the page title</title>
     * </head><body>
     * <h1>the page title inside a link to the <channelTree> link</h1>
     * <p>
     * the channelTree description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channelTree is a <channelTree> tag] and
     *           out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //Create a tree with the channel tag as the root
        XMLTree channelTree = channel.child(0);

        //Find the index of title,description,link, and the first item tag
        int title = getChildElement(channelTree, "title");
        int description = getChildElement(channelTree, "description");
        int link = getChildElement(channelTree, "link");

        //HTML tags to be printed to an HTML file
        out.println("<html>");
        out.println("<head>");

        if (title < 0) {
            out.println("   <title>No Title Available</title>");
        } else if (channelTree.child(title).numberOfChildren() == 0) {
            out.println("   <title>No Title Available</title>");
        } else {
            out.println("   <title>" + channelTree.child(title).child(0).label()
                    + "</title>");
        }

        out.println("</head>");
        out.println("<body>");
        out.println("<h1>");
        out.println("<a href =" + channelTree.child(link).child(0).label() + ">"
                + channelTree.child(title).child(0).label() + "</a>");
        out.println("</h1>");
        out.println("<p>");

        if (description < 0) {
            out.println("No Description Available");
        } else if (channelTree.child(description).numberOfChildren() == 0) {
            out.println("No Description Available");
        } else {
            out.println(channelTree.child(description).child(0).label());
        }

        out.println("</p>");
        out.println("<table border = \"1\">");
        out.println("<tr>");
        out.println("   <th> Date </th>");
        out.println("   <th> Source </th>");
        out.println("   <th> News </th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        //Outputs the final closing tags to an HTML file
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        //Loops through the xml file and return the index of a tag if it exists
        int index = -1;
        for (int i = 0; i < xml.numberOfChildren(); i++) {
            if (xml.child(i).isTag()) {
                if (xml.child(i).label().equalsIgnoreCase(tag)) {
                    index = i;
                    i = xml.numberOfChildren();
                }
            }
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //Finds the index of each tag
        out.println("<tr>");
        int title = getChildElement(item, "title");
        int link = getChildElement(item, "link");
        int date = getChildElement(item, "pubdate");
        int source = getChildElement(item, "source");
        int description = getChildElement(item, "description");
        String str = "url";

        //Fills the table with information that exists in the xml document
        if (date >= 0) {
            out.println(
                    "   <td>" + item.child(date).child(0).label() + "</td>");
        } else {
            out.println("   <td> No date available </td>");
        }

        if (source >= 0) {
            String sourceStr = item.child(source).attributeValue(str);
            out.println("   <td>" + "<a href =" + sourceStr + ">"
                    + item.child(source).child(0).label() + "</a>" + "</td>");
        } else {
            out.println("   <td> No source available </td>");
        }

        if (item.child(title).numberOfChildren() == 0) {
            if (link >= 0) {
                out.println("   <td>" + "<a href ="
                        + item.child(link).child(0).label() + ">"
                        + item.child(description).child(0).label() + "</td>");
            }
        } else if (title >= 0 && link >= 0) {
            out.println("   <td>" + "<a href ="
                    + item.child(link).child(0).label() + ">"
                    + item.child(title).child(0).label() + "</a>" + "</td>");
        } else if (title >= 0) {
            out.println(
                    "   <td>" + item.child(title).child(0).label() + "</td>");
        } else if (link >= 0) {
            out.println("   <td>" + "<a href ="
                    + item.child(link).child(0).label() + ">" + "</td>");
        } else {
            out.println("   <td> No title available </td>");
        }

        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        SimpleWriter outputFile = new SimpleWriter1L(file);
        SimpleReader in = new SimpleReader1L();
        XMLTree xml = new XMLTree1(url);
        SimpleWriter outputFile2 = new SimpleWriter1L();

        //outputs the tags to the html file
        outputFile.println("<html>");
        outputFile.println("<head>");
        outputFile.println(
                "   <title>" + xml.attributeValue("title") + "</title>");
        outputFile.println("</head>");
        outputFile.println("<body>");
        outputFile.println("   <h2>" + xml.attributeValue("title") + "</h2>");
        outputFile.println("   <ul>");

        int i = 0;
        while (i < xml.numberOfChildren()) {
            outputFile.println("   <li>" + "<a href= "
                    + xml.child(i).attributeValue("file") + ">"
                    + xml.child(i).attributeValue("name") + "</a>" + "</li>");
            i++;
        }

        i = 0;
        while (i < xml.numberOfChildren()) {
            XMLTree xml2 = new XMLTree1(xml.child(i).attributeValue("url"));
            if (!xml2.attributeValue("version").equals("2.0")
                    || !xml2.label().equals("rss")) {
                out.print(
                        "Error, this link is not a valid RSS version 2.0 feed: "
                                + xml.child(i).attributeValue("url"));
            } else {
                outputFile2 = new SimpleWriter1L(
                        xml.child(i).attributeValue("file"));
                outputHeader(xml2, outputFile2);

                //Create a tree with the channel tag as the root
                XMLTree channelTree = xml2.child(0);
                int item = getChildElement(channelTree, "item");

                //Create a tree with item being the root
                XMLTree itemTree = channelTree.child(item);

                //Loops through each item tag and prints the contents
                int j = item;
                while (j < channelTree.numberOfChildren()) {
                    itemTree = channelTree.child(j);
                    processItem(itemTree, outputFile2);
                    j++;

                }
                i++;
            }
            outputFooter(outputFile2);
        }

        outputFile.println("   </ul>");
        outputFile.println("</body>");
        outputFile.println("</html>");
        outputFile.close();
        in.close();
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        /*
         * Asks the user for an rss 2.0 feed and an html file, checks them, then
         * fills the file
         */
        out.print("Enter the URL of an XML document: ");
        String url = in.nextLine();
        while (!url.endsWith(".xml")) {
            if (!url.endsWith(".xml")) {
                out.print("Error, enter the URL of an XML document: ");
                url = in.nextLine();
            }

        }
        out.print("Enter the name of the output html file: ");
        String file = in.nextLine();
        while (!file.endsWith(".html")) {
            if (!file.endsWith(".html")) {
                out.print("Error, Enter the name of the output html file: ");
                file = in.nextLine();
            }
        }
        processFeed(url, file, out);

        in.close();
        out.close();

    }

}
